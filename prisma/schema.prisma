// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

generator zod {
  provider                  = "zod-prisma-types"
  output                    = "./generated/zod"
  useMultipleFiles          = true
  createInputTypes          = false
  relationModel             = true
  createRelationValuesTypes = true
  modelCase                 = "camelCase"
  modelSuffix               = "Schema"
  useDecimalJs              = true
  prismaJsonNullability     = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String           @id
  email                    String           @unique
  profileUrl               String?
  hashedPassword           String
  resetPasswordToken       String?          @unique
  resetPasswordTokenExpiry DateTime?
  firstName                String
  middleName               String?
  lastName                 String
  isArchived               Boolean          @default(false)
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  isAdmin                  Boolean          @default(false)
  sessions                 Session[]
  setting                  Setting?
  requestAsUser            Request[]        @relation(name: "UserRelation")
  requestAsReviewer        Request[]        @relation(name: "ReviewerRelation")
  userRole                 UserRole[]
  jobRequestsAsAssigned    JobRequest[]
  userDepartments          UserDepartment[]
  notification             Notification[]
}

model Department {
  id                   String             @id
  description          String?
  name                 String
  acceptsJobs          Boolean            @default(false)
  managesTransport     Boolean            @default(false)
  managesBorrowRequest Boolean            @default(false)
  managesSupplyRequest Boolean            @default(false)
  managesFacility      Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  responsibilities     String?
  departmentType       DepartmentType
  isArchived           Boolean            @default(false)
  userRole             UserRole[]         @relation("DepartmentToUserRole")
  inventoryItem        InventoryItem[]    @relation("DepartmentToInventoryItem")
  userDepartments      UserDepartment[]   @relation("DepartmentToUserDepartment")
  request              Request[]          @relation("DepartmentToRequest")
  venue                Venue[]            @relation("DepartmentToVenue")
  vehicle              Vehicle[]          @relation("DepartmentToVehicle")
  supplyItem           SupplyItem[]       @relation("DepartmentToSupplyItem")
  files                File[]
  venueRequest         VenueRequest[]
  jobRequest           JobRequest[]
  transportRequest     TransportRequest[]
}

model UserDepartment {
  id           String     @id
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  departmentId String
  department   Department @relation("DepartmentToUserDepartment", fields: [departmentId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([userId, departmentId])
}

model UserRole {
  id           String     @unique @default(uuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id])
  departmentId String
  department   Department @relation("DepartmentToUserRole", fields: [departmentId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([userId, roleId, departmentId])
}

model Role {
  id          String     @id
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isArchived  Boolean    @default(false)
  userRoles   UserRole[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model File {
  id           String      @id
  url          String
  filePurpose  FilePurpose @default(NONE)
  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?
}

model Setting {
  id        String   @id
  userId    String   @unique
  fontSize  String   @default("default")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id               String           @id
  title            String
  userId           String
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  message          String
  isRead           Boolean          @default(false)
  resourceId       String?
  resourceType     ResourceType
  notificationType NotificationType @default(INFO)
  recepientId      String
  createdAt        DateTime         @default(now())
  readAt           DateTime?
  updatedAt        DateTime         @updatedAt

  @@index([userId, isRead])
}

model Request {
  id                 String             @id
  completedAt        DateTime?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  priority           PriorityType
  type               RequestType
  title              String
  rejectionReason    String?
  cancellationReason String?
  onHoldReason       String?
  isUrgent           Boolean            @default(false)
  status             RequestStatusType  @default(PENDING)
  userId             String
  user               User               @relation(name: "UserRelation", fields: [userId], references: [id], onDelete: Cascade)
  departmentId       String
  department         Department         @relation("DepartmentToRequest", fields: [departmentId], references: [id], onDelete: Cascade)
  reviewedBy         String?
  reviewer           User?              @relation(name: "ReviewerRelation", fields: [reviewedBy], references: [id])
  jobRequest         JobRequest?
  venueRequest       VenueRequest?
  returnableRequest  ReturnableRequest?
  supplyRequest      SupplyRequest?
  transportRequest   TransportRequest?
}

model JobRequest {
  id                   String                @id
  description          String
  departmentId         String
  department           Department            @relation(fields: [departmentId], references: [id])
  location             String
  startDate            DateTime?
  endDate              DateTime?
  scheduledDateTime    DateTime?
  jobType              String
  proofImages          String[]
  images               String[]
  verifiedByReviewer   Boolean               @default(false)
  verifiedByRequester  Boolean               @default(false)
  rejectionCount       Int                   @default(0)
  priority             PriorityType          @default(NO_PRIORITY)
  requestId            String                @unique
  request              Request               @relation(fields: [requestId], references: [id], onDelete: Cascade)
  status               JobStatus             @default(PENDING)
  assignedTo           String?
  assignedUser         User?                 @relation(fields: [assignedTo], references: [id])
  isReassigned         Boolean               @default(false)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  jobRequestEvaluation JobRequestEvaluation?
}

model JobRequestEvaluation {
  id                String     @id
  clientType        ClientType
  position          String
  sex               String
  age               Int
  regionOfResidence String
  awarenessLevel    String
  visibility        String
  helpfulness       String
  surveyResponses   Json
  suggestions       String?
  jobRequestId      String     @unique
  jobRequest        JobRequest @relation(fields: [jobRequestId], references: [id], onDelete: Cascade)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model VenueRequest {
  id                String     @id
  departmentId      String
  department        Department @relation(fields: [departmentId], references: [id])
  notes             String?
  purpose           String
  setupRequirements String[]
  startTime         DateTime
  endTime           DateTime
  actualStart       DateTime?
  inProgress        Boolean    @default(false)
  requestId         String     @unique
  request           Request    @relation(fields: [requestId], references: [id], onDelete: Cascade)
  venueId           String
  venue             Venue      @relation(fields: [venueId], references: [id])
  approvedByHead    Boolean?
  notifyHead        Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Venue {
  id                    String                  @id
  name                  String                  @unique
  location              String
  capacity              Int
  imageUrl              String
  venueType             VenueType
  rulesAndRegulations   String?
  isArchived            Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  status                VenueStatus             @default(AVAILABLE)
  departmentId          String
  department            Department              @relation("DepartmentToVenue", fields: [departmentId], references: [id], onDelete: Cascade)
  requests              VenueRequest[]
  venueSetupRequirement VenueSetupRequirement[]
}

model VenueSetupRequirement {
  id        String   @id
  venueId   String
  available Boolean  @default(true)
  venue     Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReturnableRequest {
  id                String           @id
  itemId            String
  item              InventorySubItem @relation(fields: [itemId], references: [id])
  dateAndTimeNeeded DateTime
  inProgress        Boolean          @default(false)
  returnDateAndTime DateTime
  isOverdue         Boolean          @default(false)
  actualReturnDate  DateTime?
  isReturned        Boolean          @default(false)
  returnCondition   String?
  purpose           String
  location          String
  notes             String?
  isLost            Boolean          @default(false)
  lostReason        String?
  requestId         String           @unique
  request           Request          @relation(fields: [requestId], references: [id], onDelete: Cascade)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model InventorySubItem {
  id                String              @id
  imageUrl          String
  subName           String
  serialNumber      String?
  inventoryId       String
  inventory         InventoryItem       @relation(fields: [inventoryId], references: [id])
  status            ItemStatus          @default(AVAILABLE)
  isArchived        Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  returnableRequest ReturnableRequest[]
}

model InventoryItem {
  id                String             @id
  name              String
  description       String
  imageUrl          String
  inventorySubItems InventorySubItem[]
  isArchived        Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  departmentId      String
  department        Department         @relation("DepartmentToInventoryItem", fields: [departmentId], references: [id], onDelete: Cascade)
}

model SupplyRequest {
  id                String              @id
  dateAndTimeNeeded DateTime
  purpose           String
  requestId         String              @unique
  request           Request             @relation(fields: [requestId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  items             SupplyRequestItem[]
}

model SupplyItem {
  id                 String              @id
  name               String
  stockNumber        String
  unitValue          Float
  total              Float
  location           String
  description        String?
  status             SupplyItemStatus    @default(IN_STOCK)
  imageUrl           String
  quantity           Int
  unit               String
  lowStockThreshold  Int
  expirationDate     DateTime?
  categoryId         String
  category           SupplyItemCategory  @relation(fields: [categoryId], references: [id])
  departmentId       String
  department         Department          @relation("DepartmentToSupplyItem", fields: [departmentId], references: [id], onDelete: Cascade)
  createdAt          DateTime            @default(now())
  isArchived         Boolean             @default(false)
  updatedAt          DateTime            @updatedAt
  supplyRequestItems SupplyRequestItem[]
}

model SupplyItemCategory {
  id         String       @id
  name       String
  createdAt  DateTime     @default(now())
  isArchived Boolean      @default(false)
  updatedAt  DateTime     @updatedAt
  supplyItem SupplyItem[]
}

model SupplyRequestItem {
  id              String        @id
  supplyRequestId String
  supplyItemId    String
  quantity        Int
  supplyRequest   SupplyRequest @relation(fields: [supplyRequestId], references: [id], onDelete: Cascade)
  supplyItem      SupplyItem    @relation(fields: [supplyItemId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([supplyRequestId, supplyItemId])
}

model TransportRequest {
  id                     String     @id
  description            String
  departmentId           String
  department             Department @relation(fields: [departmentId], references: [id])
  numberOfPassengers     Int
  passengersName         String[]
  destination            String
  inProgress             Boolean    @default(false)
  actualStart            DateTime?
  dateAndTimeNeeded      DateTime
  odometerStart          Float?
  odometerEnd            Float?
  totalDistanceTravelled Float?
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  requestId              String     @unique
  request                Request    @relation(fields: [requestId], references: [id], onDelete: Cascade)
  vehicleId              String
  vehicle                Vehicle    @relation(fields: [vehicleId], references: [id])
}

model Vehicle {
  id                  String               @id
  name                String
  type                String
  imageUrl            String
  capacity            Int
  licensePlate        String
  odometer            Float                @default(0)
  maintenanceInterval Float                @default(200000)
  requiresMaintenance Boolean              @default(false)
  isArchived          Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  status              VehicleStatus        @default(AVAILABLE)
  departmentId        String
  department          Department           @relation("DepartmentToVehicle", fields: [departmentId], references: [id], onDelete: Cascade)
  transportRequest    TransportRequest[]
  maintenanceHistory  MaintenanceHistory[]
}

model MaintenanceHistory {
  id          String   @id
  vehicleId   String
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
  performedAt DateTime
  odometer    Float
  description String?
  createdAt   DateTime @default(now())
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum EntityType {
  JOB_REQUEST
  VENUE_REQUEST
  RETURNABLE_REQUEST
  SUPPLY_REQUEST
  TRANSPORT_REQUEST
  VENUE
  VEHICLE
  INVENTORY_ITEM
  USER
  DEPARTMENT
  OTHER
}

enum NotificationType {
  INFO
  ALERT
  REMINDER
  SUCCESS
  WARNING
  APPROVAL
}

enum FilePurpose {
  NONE
  IMAGE
  JOB_FORM
  VENUE_FORM
  TRANSPORT_FORM
  SUPPLY_FORM
  FACILITY_FORM
}

enum ResourceType {
  JOB
  REQUEST
  FILE
  TASK
  SUPPLY
}

enum VenueType {
  CLASSROOM
  AUDITORIUM
  SPORTS_HALL
  LAB
  CONFERENCE_ROOM
  LIBRARY
  OTHER
}

enum ClientType {
  CITIZEN
  BUSINESS
  GOVERNMENT
}

enum ItemStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  LOST
}

enum SupplyItemStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  ORDERED
  EXPIRED
}

enum DepartmentType {
  ACADEMIC
  ADMINISTRATIVE
}

enum VenueStatus {
  AVAILABLE
  IN_USE
  UNDER_MAINTENANCE
  CLOSED
}

enum VehicleStatus {
  AVAILABLE
  IN_USE
  UNDER_MAINTENANCE
}

enum RequestType {
  JOB
  BORROW
  SUPPLY
  VENUE
  TRANSPORT
}

enum PriorityType {
  NO_PRIORITY
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RequestStatusType {
  PENDING
  APPROVED
  REVIEWED
  COMPLETED
  REJECTED
  CANCELLED
  ON_HOLD
}
